// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  password       String
  username       String
  profilePicture String?

  artist         Artist?  @relation("UserArtist")
  notifications  Notification[]
  comments       Comment[]
  followers      Follower[]

  @@map("users")
}

model Artist {
  id     String  @id @default(uuid())
  user   User    @relation("UserArtist", fields: [userId], references: [id])
  userId String  @unique

  arts          Art[]
  collections   ArtCollection[]
  feed          Feed[]
  followers     Follower[]
  notifications Notification[]

  @@map("artists")
}

model Follower {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  artistId  String
  artist    Artist   @relation(fields: [artistId], references: [id])

  @@map("followers")
}

model Art {
  id          String   @id @default(uuid())
  imageUrl    String
  description String
  datePosted  DateTime @default(now())
  artistId    String
  artist      Artist   @relation(fields: [artistId], references: [id])

  comments    Comment[]
  tags        ArtToArtTag[]
  collections ArtCollection[]

  @@map("arts")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  artId     String
  art       Art      @relation(fields: [artId], references: [id])

  @@map("comments")
}

model ArtTag {
  id       String  @id @default(uuid())
  tagName  String
  arts     ArtToArtTag[]

  @@map("art_tags")
}

model ArtCollection {
  id              String   @id @default(uuid())
  collectionName  String
  createdAt       DateTime @default(now())

  artist          Artist   @relation(fields: [artistId], references: [id])
  artistId        String

  artId           String
  art             Art      @relation(fields: [artId], references: [id])

  @@map("art_collections")
}

model Feed {
  id         String   @id @default(uuid())
  artist     Artist   @relation(fields: [artistId], references: [id])
  artistId   String
  content    String
  datePosted DateTime @default(now())
  
  @@map("feeds")
}

model Notification {
  id String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String

  artistId       String?
  artist         Artist?  @relation(fields: [artistId], references: [id])

  content        String
  createdAt      DateTime @default(now())
  
  @@map("notifications")
}

model ArtToArtTag {
  art       Art     @relation(fields: [artId], references: [id])
  artId     String

  tag       ArtTag  @relation(fields: [tagId], references: [id])
  tagId     String

  @@id([artId, tagId])
  @@map("art_to_art_tag") 
}


generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
