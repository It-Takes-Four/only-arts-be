// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid()) @db.Uuid
  email          String         @unique
  password       String
  username       String
  profilePicture String?
  artist         Artist?        @relation("UserArtist")
  comments       Comment[]
  followers      Follower[]
  notifications  Notification[]
}

model Artist {
  id            String          @id @default(uuid()) @db.Uuid
  userId        String          @unique @db.Uuid
  artistName    String          
  isNsfw        Boolean         @default(false) 
  bio           String?         
  collections   ArtCollection[]
  user          User            @relation("UserArtist", fields: [userId], references: [id])
  arts          Art[]
  feed          Feed[]
  followers     Follower[]
  notifications Notification[]
}

model Follower {
  id       String @id @default(uuid()) @db.Uuid
  userId   String @db.Uuid
  artistId String @db.Uuid
  artist   Artist @relation(fields: [artistId], references: [id])
  user     User   @relation(fields: [userId], references: [id])

  @@unique([userId, artistId]) 
}

model Art {
  id          String          @id @default(uuid()) @db.Uuid
  imageUrl    String
  description String
  datePosted  DateTime        @default(now())
  artistId    String          @db.Uuid
  collections ArtToCollection[]
  tags        ArtToArtTag[]
  artist      Artist          @relation(fields: [artistId], references: [id])
  comments    Comment[]
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  content   String
  createdAt DateTime @default(now())
  userId    String   @db.Uuid
  artId     String   @db.Uuid
  art       Art      @relation(fields: [artId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model ArtTag {
  id      String        @id @default(uuid()) @db.Uuid
  tagName String        @unique
  arts    ArtToArtTag[]
}

model ArtCollection {
  id             String             @id @default(uuid()) @db.Uuid
  collectionName String
  createdAt      DateTime           @default(now())
  artistId       String             @db.Uuid  
  artist         Artist             @relation(fields: [artistId], references: [id])
  arts           ArtToCollection[]
}

model ArtToCollection {
  id           String   @id @default(uuid()) @db.Uuid
  artId        String   @db.Uuid
  collectionId String   @db.Uuid
  art          Art      @relation(fields: [artId], references: [id])
  collection   ArtCollection @relation(fields: [collectionId], references: [id])
}

model Feed {
  id         String   @id @default(uuid()) @db.Uuid
  artistId   String   @db.Uuid
  title      String
  content    String
  datePosted DateTime @default(now())
  artist     Artist   @relation(fields: [artistId], references: [id])
}

model Notification {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  artistId  String?  @db.Uuid
  content   String
  createdAt DateTime @default(now())
  artist    Artist?  @relation(fields: [artistId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model ArtToArtTag {
  artId String @db.Uuid
  tagId String @db.Uuid
  art   Art    @relation(fields: [artId], references: [id])
  tag   ArtTag @relation(fields: [tagId], references: [id])

  @@id([artId, tagId])
}
